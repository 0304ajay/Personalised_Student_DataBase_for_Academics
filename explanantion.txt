1.if uploaded_file is not None:
 This line checks if a file was uploaded by the user. If uploaded_file is not None, it means that a file was uploaded

2.file_data = uploaded_file.getvalue():
  This line reads the binary data of the uploaded file using the getvalue() method of the uploaded_file object. It retrieves the contents of the file as bytes.

3.file_name = uploaded_file.name:
   This line retrieves the name of the uploaded file using the name attribute of the uploaded_file object. It stores the file name in the file_name variable.

4.insert_pdf(file_name, file_data):
 This line calls a function named insert_pdf() with two arguments: the file name (file_name) and the file data (file_data). This function is assumed to insert the PDF file into a database.

5. BLOB :
It is a datatype used to store Large Binary Data,like Images,audofiles,and PDF's

6.''' ''':
In python we use this syntax for multi line strings

import streamlit as st
import pandas as pd
import sqlite3
import base64

# Function to create database table if not exists
def create_table():
    conn = sqlite3.connect('pdf_database.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS pdf_files
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, file_name TEXT, file_data BLOB)''')
    conn.commit()
    conn.close()

# Function to insert PDF file into database
def insert_pdf(file_name, file_data):
    conn = sqlite3.connect('pdf_database.db')
    c = conn.cursor()
    c.execute('''INSERT INTO pdf_files (file_name, file_data) VALUES (?, ?)''', (file_name, file_data))
    conn.commit()
    conn.close()

# Function to retrieve PDF file from database
def retrieve_pdf():
    conn = sqlite3.connect('pdf_database.db')
    c = conn.cursor()
    c.execute('''SELECT id, file_name FROM pdf_files''')
    pdf_files = c.fetchall()
    conn.close()
    return pdf_files

# Function to retrieve PDF file data from database
def retrieve_pdf_data(file_id):
    conn = sqlite3.connect('pdf_database.db')
    c = conn.cursor()
    c.execute('''SELECT file_data FROM pdf_files WHERE id = ?''', (file_id,))
    pdf_data = c.fetchone()[0]
    conn.close()
    return pdf_data

# Create database table if not exists
create_table()

# Streamlit code
st.title("PDF Upload and Display")

# File uploader widget
uploaded_file = st.file_uploader("Upload a PDF file")

# If file is uploaded
if uploaded_file is not None:
    # Read the file data
    file_data = uploaded_file.getvalue()
    # Get the file name
    file_name = uploaded_file.name
    # Insert PDF file into database
    insert_pdf(file_name, file_data)
    st.success(f"Successfully uploaded and saved {file_name} to the database!")

# Display uploaded PDF files
pdf_files = retrieve_pdf()
if pdf_files:
    st.header("Uploaded PDF Files:")
    for pdf_file in pdf_files:
        # Display file name
        st.write(pdf_file[1])
        # Add download link
        download_link = f'<a href="data:application/octet-stream;base64,{base64.b64encode(retrieve_pdf_data(pdf_file[0])).decode()}" download="{pdf_file[1]}">Download</a>'
        st.markdown(download_link, unsafe_allow_html=True)
